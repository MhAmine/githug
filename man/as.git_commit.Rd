% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_as_git_commit.R
\name{as.git_commit}
\alias{as.git_commit}
\title{Address a commit, the git2r way}
\usage{
as.git_commit(x, repo = ".", ...)
}
\arguments{
\item{x}{Target commit, as a
\href{http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions}{revision
 string}, e.g. \code{HEAD^}, \code{branchname}, \code{SHA-1} or a leading
substring thereof.}

\item{repo}{Path to a Git repo. If unspecified, current working directory is
checked to see if it is or is inside a Git repo.}

\item{...}{additional arguments (none currently in use)}
}
\value{
An S4 \code{\linkS4class{git_commit}} object
}
\description{
Use this to convert a
\href{https://git-scm.com/docs/git-rev-parse.html#_specifying_revisions}{revision
string} into an object of class \code{\linkS4class{git_commit}}, which is how
the \code{\link{git2r}} package handles Git commits.
}
\details{
\code{githug} uses \code{\link{git2r}}, under the hood, to perform local Git
operations. While \code{githug} always identifies a commit via its SHA or a
revision string, \code{\link{git2r}} handles repositories as objects of class
\code{\linkS4class{git_commit}}. If you want to do a Git operation that isn't
exposed via \code{githug}, this function helps you specify the commit
\code{\link{git2r}}-style.
}
\examples{
repo <- git_init(tempfile("githug-"))
owd <- setwd(repo)
write("Are these girls real smart or real real lucky?", "max.txt")
write("You get what you settle for.", "louise.txt")
git_commit(all = TRUE,
           message = "Brains'll only get you so far and luck always runs out.")
write("If done properly armed robbery doesn't have to be a totally unpleasant experience.",
      "jd.txt")
git_commit("jd.txt", message = "J.D. is charming")

## refer to these commits
as.git_commit("HEAD")
as.git_commit("HEAD^")
as.git_commit("master~1")

setwd(owd)
}

