% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_repository.R
\name{as.git_repository}
\alias{as.git_repository}
\title{Open a Git repository, the git2r way}
\usage{
as.git_repository(x, ...)
}
\arguments{
\item{x}{path that is or is in a Git repository; defaults to working
directory}

\item{...}{additional arguments, such as \code{ceiling} from
\code{\link[git2r]{discover_repository}()}}
}
\value{
An S4 \code{\linkS4class{git_repository}} object
}
\description{
Use this to convert a path into a \code{\linkS4class{git_repository}} object,
which is how the \code{\link{git2r}} package handles Git repositories. This
function is a slightly more flexible version of
\code{\link[git2r:repository]{git2r::repository}()}.
}
\details{
\code{githug} uses \code{\link{git2r}}, under the hood, to perform local Git
operations. While \code{githug} always identifies the repository via its
path, \code{\link{git2r}} handles repositories as objects of class
\code{\linkS4class{git_repository}}. If you want to do a Git operation that
isn't exposed via \code{githug}, this function helps you specify the
repository \code{\link{git2r}}-style.
}
\examples{
\dontrun{
as.git_repository()
as.git_repository("path")
as.git_repository("repo-path/subdir")
as.git_repository("repo-path/subdir", ceiling = 0)

## here's a rather exotic Git operation that githug is unlikely to expose:
## odb_blobs() lists "all blobs reachable from the commits in the object database"
## pre-process the repo with as_git_repository() to prepare for git2r
git2r::odb_blobs(as.git_repository("repo-path"))
}
}

