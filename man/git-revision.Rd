% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_revision.R
\name{git-revision}
\alias{git-revision}
\alias{git_revision}
\alias{git_revision_exists}
\title{Identify commits like a human}
\usage{
git_revision(rev = "HEAD", repo = ".")

git_revision_exists(rev, repo = ".")
}
\arguments{
\item{rev}{Target commit, as a
\href{http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions}{revision
 string}, e.g. \code{HEAD^}, \code{branchname}, \code{SHA-1} or a leading
substring thereof.}

\item{repo}{Path to a Git repo. If unspecified, current working directory is
checked to see if it is or is inside a Git repo.}
}
\value{
SHA of the commit. The \code{when} attribute holds the commit time as
  \code{POSIXct}. An excerpt of the commit message is in the \code{msg_start}
  attribute.
}
\description{
Retrieve the SHA-1 for a specific commit via a human-friendly description,
like
\itemize{
\item \code{HEAD}: the most recent commit and the one that will be
parent to the next commit.
\item \code{master@{1 month ago}}: the tip commit of the
\code{master} branch this time last month
\item \code{bug-fix}: the tip commit of the \code{bug-fix} branch
\item \code{feature^}: parent of the tip commit of the \code{feature} branch
\item \code{master~2}: grandparent of the tip commit of the \code{master}
branch
\item \code{8675309}: commit with \code{8675309} as leading substring of SHA-1
}
Convenience wrapper around
\code{\link[git2r:revparse_single]{git2r::revparse_single}()}, which
implements functionality from \code{git rev-parse}.
}
\section{git_revision}{


  If called with no arguments, this returns SHA for HEAD of repo associated
  with current working directory.
}

\section{git_revision_exists}{


  Tests if \code{rev} can be resolved to a specific commit.
}
\examples{
repo <- git_init(tempfile("githug-revisions-"))
owd <- setwd(repo)

## no commits --> HEAD cannot be resolved
git_revision_exists("HEAD")
\dontrun{
git_revision()
}

## commit and ... now HEAD exists
write("Well, we're not in the middle of nowhere,", "nowhere.txt")
git_commit(all = TRUE, message = "1ouise: not in the middle of nowhere")
git_revision()
git_revision_exists("HEAD")

## make a new commit then ask for parent of HEAD
write("but we can see it from here.", "nowhere.txt", append = TRUE)
git_commit(all = TRUE, message = "louise: but can see it")
git_revision("HEAD^")

## create a new branch and find out what it points at
git_switch("newbranch", create = TRUE)
git_revision("newbranch")

setwd(owd)
}
\references{
\href{https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection}{Revision
Selection} from the Pro Git book by Scott Chacon and Ben Straub

Specifying revisions section of the
\href{https://git-scm.com/docs/git-rev-parse.html#_specifying_revisions}{git-rev-parse
man page}
}

