% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_amend.R
\name{git_amend}
\alias{git_amend}
\title{Re-do the most recent commit}
\usage{
git_amend(message = character(), ask = TRUE, repo = ".")
}
\arguments{
\item{message}{The commit message. If not provided and \code{ask = FALSE},
the original commit message is reused. If message is not given and
\code{ask = TRUE} and session is interactive, you get a chance to supply
the message, including an option to reuse the original message.}

\item{ask}{Whether to confirm that user wants to change history}

\item{repo}{Path to a Git repo. If unspecified, current working directory is
checked to see if it is or is inside a Git repo.}
}
\value{
SHA of the commit, with a hint about commit time and message stored
  in the \code{hint} attribute
}
\description{
Undo the most recent commit WHILE LEAVING ALL YOUR FILES ALONE, combine those
changes with the currently staged changes, and make a new commit. If nothing
is currently staged, this is just a way to edit the most recent commit
message. This function is "working directory safe" but "history unsafe".
Think twice before "amending" a commit that you have pushed (see Details).
}
\details{
\code{git_amend()} will not change your files. It gives you a do over on your
most recent Git commit. When might you use this? If you realize the most
recent commit included the wrong file changes or had a bad commit message. If
you're not ready to re-commit yet, use \code{\link{git_uncommit}()} to just
undo the commit.

When might you NOT want to use this? If you have already pushed the most
recent commit to a remote. It could still be OK if you're sure no one else
has pulled. But be prepared to force push in this situation.

\code{git_amend()} addresses the fourth most up-voted question on
StackOverflow:
\href{http://stackoverflow.com/questions/179123/edit-an-incorrect-commit-message-in-git}{Edit
an incorrect commit message in Git}, with over 1.7 million views. It is
equivalent to \code{git commit --amend -m "New commit message"}.
}
\examples{
repo <- git_init(tempfile("githug-"))
owd <- setwd(repo)
write("Are these girls real smart or real real lucky?", "max.txt")
git_commit("max.txt", message = "lines from max")
write("Did I hear somebody say \\"Peaches\\"?", "jimmy.txt")
git_commit("jimmy.txt", message = "lines from some guy")
git_history()   ## note the SHA of the most recent commit

## fix the previous commit message
git_amend(message = "lines from jimmy", ask = FALSE)
git_history()   ## note the SHA of most recent commit has changed

setwd(owd)
}

