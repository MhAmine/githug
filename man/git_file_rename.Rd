% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_file_rename.R
\name{git_file_rename}
\alias{git_file_rename}
\alias{git_mv}
\title{Rename or move a file and stage both ends}
\usage{
git_file_rename(from, to, repo = ".")

git_mv(from, to, repo = ".")
}
\arguments{
\item{from}{Path to an existing file, relative to the repo working directory}

\item{to}{The desired new name, relative to the repo working directory}

\item{repo}{Path to a Git repo. If unspecified, current working directory is
checked to see if it is or is inside a Git repo.}
}
\value{
Nothing
}
\description{
Rename a file and stage both ends of the transaction, i.e. the deletion of
the file under its original name and the addition of the file under its new
name. You still need to make the commit. If Git recognizes a rename event,
then the history of the file will be preserved. This is worth striving for.
Maximize the chance of this happy event by making the rename/move a distinct
operation that is not muddled up with other changes to the file.
}
\details{
This is an extremely simple implementation of basic \code{git mv}. Why? True
\code{git mv} is offered neither by libgit2 nor, therefore, by
\code{\link{git2r}}.
}
\examples{
repo <- git_init(tempfile("githug-"))
owd <- setwd(repo)
write("Are these girls real smart or real real lucky?", "louise.txt")
git_commit(all = TRUE, message = "filename is all wrong")
git_mv(from = "louise.txt", to = "max.txt")
git_commit(all = TRUE, message = "corrected filename")
git_history()
setwd(owd)
}

