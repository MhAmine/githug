% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_unstage.R
\name{git_unstage}
\alias{git_unstage}
\title{Unstage changes for the next commit.}
\usage{
git_unstage(..., all = FALSE, repo = ".")
}
\arguments{
\item{...}{One or more paths that will be matched against files with changes
that are staged for the next commit. Paths that match will be unstaged,
i.e. their changes will not be part of the next commit.}

\item{all}{Logical, consulted if no paths are given. If \code{TRUE},
pre-authorizes the unstaging of all staged files.}

\item{repo}{Path to a Git repo. If unspecified, current working directory is
checked to see if it is or is inside a Git repo.}
}
\value{
nothing
}
\description{
Remove file modifications from the staging area for the next commit, BUT
LEAVE YOUR FILES ALONE. This function is "working directory safe". It will
not change your files. It only unstages them. When would you use this? If
you've staged changes by mistake and you don't want them in the next commit
after all.
}
\details{
\code{git_unstage()} addresses a popular question on StackOverflow:
\href{http://stackoverflow.com/questions/348170/how-to-undo-git-add-before-commit}{How
to undo 'git add' before commit?}, with over 1.3 million views.  In terms of
command line Git, this reverses \code{git add file.txt}. The call
\code{git_unstage("file.txt")} is equivalent to \code{git reset file.txt},
which is short for \code{git reset --mixed HEAD file.txt}, i.e. a mixed reset
of \code{file.txt} to the commit pointed to by current HEAD.
}
\examples{
repo <- git_init(tempfile("githug-"))
owd <- setwd(repo)
write("Are these girls real smart or real real lucky?", "max.txt")
git_commit(all = TRUE, message = "first commit")
write("You get what you settle for.", "louise.txt")
git_status()
git_add("louise.txt")
git_status()
git_unstage("louise.txt")
git_status()
setwd(owd)
}

