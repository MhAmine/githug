% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_branch.R
\name{githug-branches}
\alias{git_CHECKOUT}
\alias{git_branch_create}
\alias{git_branch_list}
\alias{git_checkout}
\alias{githug-branches}
\title{List, query, create, or checkout branches}
\usage{
git_branch_list(which = c("all", "local", "remote"), repo = ".")

git_branch_create(name, repo = ".", ...)

git_checkout(name, repo = ".", ...)

git_CHECKOUT(name, repo = ".", ...)
}
\arguments{
\item{which}{Which branches to list: \code{all} (the default), \code{local}
only, or \code{remote} only.}

\item{repo}{Path to a Git repo. If unspecified, current working directory is
checked to see if it is or is inside a Git repo.}

\item{name}{Name of the branch.}

\item{...}{Additional optional arguments to pass along to
\code{\link{git2r}}.}
}
\value{
Branch name
}
\description{
Convenience wrappers around branch-related functions from
\code{\link{git2r}}.
}
\section{git_branch_list}{


  \code{git_branch_list} returns a data frame of information provided by the
  \code{\link[git2r]{branches}} function of \code{\link{git2r}}.

How it corresponds to command line Git:

\describe{
  \item{\code{git_branch_list()}}{is like \code{git branch -a}. Lists all
  branches}
  \item{\code{git_branch_list("local")}}{is like \code{git branch}. Lists
  only local branches.}
  \item{\code{git_branch_list("remote")}}{is like \code{git branch -r}. Lists
  only remote branches.}
}

Returns a data frame (or tbl_df) with one row per branch. Variables are
branch name, type (local vs remote), and a list-column of
\code{\linkS4class{git_branch}} objects.
}

\section{git_branch_create}{


  \code{git_branch_create} creates a new local branch. You must specify the
  \code{name} of the new branch, at the very least. By default, will try
  determine \code{repo} from current working directory and then determine
  current HEAD from that. Optionally, you can provide the path to a
  \code{repo} and, via \code{...}, even other arguments to
  \code{\link[git2r]{branch_create}}, such as an arbitrary
  \code{\linkS4class{git_commit}} object to use as the branch's starting
  point.
}

\section{git_checkout}{


  \code{git_checkout} checks out an existing branch. You must specify the
  branch \code{name} at the very least. This wraps \code{\link{git2r}}'s
  \code{\link[git2r]{checkout,git_branch-method}}.
}

\section{git_CHECKOUT}{


  \code{git_CHECKOUT} checks out a branch AND creates it if necessary. This
  wraps \code{\link{git2r}}'s
  \code{\link[git2r]{checkout,git_repository-method}}.
}
\examples{
## TO DO: come back when I can clone and truly show local v. remote
git_branch_list()
\dontrun{
## TODO: come back! this just here to satisfy R CMD check
git_branch_create()
}
}

