% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git_branch.R
\name{githug-branches}
\alias{git_CHECKOUT}
\alias{git_branch_create}
\alias{git_branch_delete}
\alias{git_branch_list}
\alias{git_checkout}
\alias{githug-branches}
\title{List, create, checkout, or delete branches}
\usage{
git_branch_list(which = c("all", "local", "remote"), repo = ".",
  tips = FALSE)

git_branch_create(name, repo = ".", ...)

git_checkout(name = "master", repo = ".", ...)

git_CHECKOUT(name, repo = ".", ...)

git_branch_delete(name, repo = ".", ...)
}
\arguments{
\item{which}{Which branches to list: \code{all} (the default), \code{local}
only, or \code{remote} only.}

\item{repo}{Path to a Git repo. If unspecified, current working directory is
checked to see if it is or is inside a Git repo.}

\item{tips}{Logical. Requests information from \code{\link{git_log}} on the
commit currently at the tip of each branch. Defalts to \code{FALSE}.}

\item{name}{Name of the branch.}

\item{...}{Additional optional arguments to pass along to
\code{\link{git2r}}.}
}
\description{
Convenience wrappers around branch-related functions from
\code{\link{git2r}}.
}
\section{git_branch_list}{


  \code{git_branch_list} returns a data frame of information provided by the
  \code{\link[git2r]{branches}} function of \code{\link{git2r}} and,
  optionally, commit information for the current branch tips from
  \code{\link{git_log}}.

How it corresponds to command line Git:

\describe{
  \item{\code{git_branch_list()}}{is like \code{git branch -a}. Lists all
  branches}
  \item{\code{git_branch_list("local")}}{is like \code{git branch}. Lists
  only local branches.}
  \item{\code{git_branch_list("remote")}}{is like \code{git branch -r}. Lists
  only remote branches.}
}

Returns a data frame (or tbl_df) with one row per branch. Default variables
are branch \code{name}, \code{type} (local vs remote), and a list-column of
\code{\linkS4class{git_branch}} objects. If \code{tips = TRUE}, additional
variables from \code{\link{git_log}} are returned, describing the the commit
each branch points to at the time of the call.
}

\section{git_branch_create}{


  \code{git_branch_create} creates a new local branch. You must specify the
  \code{name} of the new branch, at the very least. By default, will try
  determine \code{repo} from current working directory and then determine
  current HEAD from that. Optionally, you can provide the path to a
  \code{repo} and, via \code{...}, even other arguments to
  \code{\link[git2r]{branch_create}}: an arbitrary
  \code{\linkS4class{git_commit}} object to use as the branch's starting
  point or use \code{force = TRUE} to overwrite an existing branch.
}

\section{git_checkout}{


  \code{git_checkout} checks out an existing local branch. Specify the branch
  by \code{name} or checkout \code{master} by default. This wraps
  \code{\link{git2r}}'s \code{\link[git2r]{checkout,git_branch-method}}.
}

\section{git_CHECKOUT}{


  \code{git_CHECKOUT} checks out a branch AND creates it if necessary. This
  wraps \code{\link{git2r}}'s
  \code{\link[git2r]{checkout,git_repository-method}}.
}

\section{git_branch_delete}{


  \code{git_branch_delete} deletes an existing local branch. Specify the
  branch by \code{name}. This wraps \code{\link[git2r]{branch_delete}} from
  \code{\link{git2r}}.
}
\examples{
repo <- git_init(tempfile("githug-"))
owd <- setwd(repo)

## no branches yet, because no commits
git_branch_list()

## commit and ... now we have master
writeLines('a', 'a')
git_COMMIT('a commit')
git_branch_list()

## create new branch that points at HEAD
git_branch_create("alpha")
git_branch_list()

setwd(owd)
repo <- git_init(tempfile("githug-"))
owd <- setwd(repo)
writeLines("Well, we're not in the middle of nowhere...", "nowhere.txt")
git_COMMIT('01')
write("but we can see it from here.", "nowhere.txt", append = TRUE)
git_COMMIT('02')

## create new branch that points at *first commit*, not HEAD
(gl <- git_log())
git_branch_create("point_01", commit  = gl$commit[[2]])
git_branch_list()
git_branch_list(tips = TRUE)

setwd(owd)
}

