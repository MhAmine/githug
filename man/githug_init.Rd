% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/githug_init.R
\name{githug_init}
\alias{githug_init}
\title{Connect a local Git repository to a GitHub repository}
\usage{
githug_init(name = NULL, description = NULL, remote_name = "origin",
  protocol = c("https", "ssh"), cred = NULL, pat = gh_pat(), path = ".",
  ...)
}
\arguments{
\item{name}{Name of the new repository, optional. Default behavior if
unspecified: if an RStudio project file is found in \code{path},
\code{name} will be the filename, after removing the \code{.Rproj}
extension. Otherwise, \code{name} will be the \link{basename} of
\code{path}.}

\item{description}{Short description of the GitHub repository, optional.}

\item{remote_name}{Name for the new GitHub remote, optional. Defaults to
\code{origin}.}

\item{protocol}{Transfer protocol, either "https" (the default) or "ssh".}

\item{cred}{Credential object, in the sense of the \code{\link{git2r}}
package, optional. If you are already able to push and pull from the
command line, you can probably ignore this. See details for more.}

\item{pat}{A GitHub personal access token (PAT) from
\url{https://github.com/settings/tokens}.  The "repo" scope is required
which is one of the default scopes for a new PAT. By default, \code{pat}
will be obtained via \code{\link{gh_pat}}, which consults your environment
variables (by default, \code{GITHUB_PAT} and \code{GITHUB_TOKEN}, in that
order).}

\item{path}{Path to the directory where a Git repo should be initialized, if
not done already, and connected to GitHub, optional. Defaults to working
directory.}

\item{...}{Other parameters passed to the GitHub API when creating the new
repository, optional. Read more at
\url{https://developer.github.com/v3/repos/#create}. For example, by
passing \code{private = TRUE}, you can create a new private repository, if
your GitHub account is eligible.}
}
\value{
Path to the local repository.
}
\description{
Take a local project, put it under version control if necessary, create a
companion repository on GitHub, connect them, and, in an interactive session,
visit the new repo in the browser. Insipred by \code{hub create} from the
\href{URL}{hub} command line tool
}
\details{
This requires a free GitHub account, which can be registered at
\url{https://github.com}. There is some additional setup that gives
\code{\link{githug}} the ability to deal with GitHub on your behalf:

\describe{
\item{GitHub personal access token}{The only way to create a GitHub
repository is through the API, so you must obtain a personal access token
(PAT). For advice on how to store your PAT, see \code{\link{gh_pat}}}.
\item{GitHub username}{\code{githug_init} uses your PAT to lookup your GitHub
username. This information, and much more, is stored in custom Git variables
for downstream use. The GitHub username is stored under \code{githug.user}
and can be configured globally, i.e. at the user level, or locally, i.e. at
the repo level (the default behavior of \code{githug_init}). To set or modify
\code{githug.user} manually, use \code{git_config_global(githug.user =
<YOUR-GITHUB-USERNAME>)} or \code{git_config_local(githug.user =
<YOUR-GITHUB-USERNAME>)}.}
}

At the moment, \code{githug_init} expects to be creating a new GitHub repo,
though that should change. Currently, the function just stops if it detects
evidence of a pre-existing remote/GitHub setup. What to do:

\itemize{
\item If the local repo is valuable and the GitHub remote is expendable,
delete the GitHub repo. For now, do that in the browser. Also delete the
\code{origin} remote from the local repository, via
\code{git2r::remote_remove(as_git_repository(), "origin")} in R or \code{git
remote rm origin} in the shell. And call \code{githug_init} again.
\item If the GitHub repo is valuable and the local repo is expendable, delete
local. And use `git clone` or RStudio to clone the GitHub repo.
\item If both are valuable, \code{githug} can't help you yet.
}

Credentials. Most people (?) should not need to use \code{cred} unless they
want to. For "https" users, \code{githug_init} uses your PAT to push. For
"ssh" users, it is assumed that public and private keys are in the default
locations, \code{~/.ssh/id_rsa.pub} and \code{~/.ssh/id_rsa}, respectively,
and that \code{ssh-agent} is configured to manage any associated passphrase.
If you want to specify credentials explicitly, see
\code{\link[git2r]{cred_ssh_key}}, \code{\link[git2r]{cred_user_pass}},
\code{\link[git2r]{cred_env}}, and \code{\link[git2r]{cred_token}}.
}
\examples{
\dontrun{
## Example 1:
## create a directory and local repo and remote repo, all at once
## TO DO: remove private = TRUE maybe
githug_init(path = tempfile("init-test-"), private = TRUE)
}

\dontrun{
## Example 2:
## connect a pre-existing Git repo to GitHub
repo <- git_init(tempfile("githug-init-example-"))

## switch working directory to the repo
owd <- setwd(repo)

## Config local git user and make a commit
git_config(user.name = "thelma", user.email = "thelma@example.org")
writeLines("I don't ever remember feeling this awake.", "thelma.txt")
git_COMMIT("thelma is awake")
git_log()

## Connect it to GitHub! Visit the new repo in the browser.
## TO DO: remove private = TRUE maybe
githug_init(private = TRUE)

## see that the 'origin' is now set to the GitHub remote
## TO DO: revise this when remote stuff done
git2r::remotes()
git2r::remote_url(as_git_repository())

## see that local master is tracking remote master
git2r::branch_get_upstream(git_HEAD()$git_branch)

setwd(owd)
}

\dontrun{
## Example 3:
## Turn an existing directory into a Git repo to and connect to GitHub
repo <- tempfile("githug-init-example-")
dir.create(repo)
owd <- setwd(repo)
## TO DO:remove private = TRUE maybe
githug_init(private = TRUE)
setwd(owd)
}
}

